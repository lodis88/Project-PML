i <<- NULL
}
get  <- function() x
setinverse  <- function(inverse) i  <<- inverse
getinverse  <- function() i
list(set= set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(x=y)
x
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i  <- x$getinverse()
if (!is.null(i)){
message("getting cached data")
return(i)
}
data  <- x$get()
i  <- solve(data, ...)
x$setinverse(i)
i
}
cacheSolve(x)
cacheSolve (x)
cacheSolve (x=x)
cacheSolve (x=y)
i
cacheSolve
i
data
i  <- NULL
set  <- function(y){
x <<- y
i <<- NULL
}
set
x
y
get  <- function() x
setinverse  <- function(inverse) i  <<- inverse
getinverse  <- function() i
list(set= set, get = get,
setinverse = setinverse,
getinverse = getinverse)
i
x
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i  <- x$getinverse()
if (!is.null(i)){
message("getting cached data")
return(i)
}
data  <- x$get()
i  <- solve(data, ...)
x$setinverse(i)
i
}
x
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
i  <- NULL
set  <- function(y){
x <<- y
i <<- NULL
}
get  <- function() x
setinverse  <- function(inverse) i  <<- inverse
getinverse  <- function() i
list(set= set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix( x=y)
cacheSolve <- function(x, ...) {
i  <- x$getinverse()
if (!is.null(i)){
message("getting cached data")
return(i)
}
data  <- x$get()
i  <- solve(data, ...)
x$setinverse(i)
i
}
cacheSolve (x)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(z) inverse <<- z
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix (x =y)
makeCacheMatrix (y)
cacheSolve <- function(x, ...) {
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
size <- nrow(data)
inverse <- solve(data,diag(1,size,size))
x$setinverse(inverse)
inverse
}
cacheSolve (x)
makeCacheMatrix <- function(x = matrix()) {
# init inverse cached matrix to NULL
inv <- NULL
# function to set a new value for the matrix
set <- function(y) {
# assign value
x <<- y
# reset cached inverse matrix to NULL
inv <<- NULL
}
# function to obtain the value of the matrix
get <- function() x
# function to set the inverse matrix
setInverse <- function(inverse) inv <<- inverse
# function to get the inverse matrix
getInverse <- function() inv
# return a list containing the functions
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
y
z <- c(2,4,1,3)
z
makeCacheMatrix (x = matrix(z,2,2))
library(datasets)
data(iris)
?iris
josival <- iris[iris$Species=="virginica",]
mean(josival$Sepal.Length)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
set.seed(1)
rpois(5, 2)
---
author: "Marcos Alexandre Lodis"
date: "23, August,2014"
output: html_document
---
Climatic events and effects to public health and economic problems
========================================================
## Synopsis
Storms and other severe weather events can cause both public health and economic problems for communities and municipalities.
This database tracks characteristics of major storms and weather events in the United States, including when and where they occur, as well as estimates of any fatalities, injuries, and property damage.
In this report, I aim to describe which storm events are the most damaging to population and economic health.
To investigate the problems, I obtained data from the U.S. National Oceanic and Atmospheric Administration's (NOAA) storm database.
Data
----
I download the file from the course web site including some documentation of the database.
The basic goal of this assignment was to explore the NOAA Storm Database and answer some basic questions about severe weather events.
Loading the Data
----------------
setwd("C:\\Users\\Marcos\Desktop\\Peer Assessment 2")
---
author: "Marcos Alexandre Lodis"
date: "23, August,2014"
output: html_document
---
Climatic events and effects to public health and economic problems
========================================================
## Synopsis
Storms and other severe weather events can cause both public health and economic problems for communities and municipalities.
This database tracks characteristics of major storms and weather events in the United States, including when and where they occur, as well as estimates of any fatalities, injuries, and property damage.
In this report, I aim to describe which storm events are the most damaging to population and economic health.
To investigate the problems, I obtained data from the U.S. National Oceanic and Atmospheric Administration's (NOAA) storm database.
Data
----
I download the file from the course web site including some documentation of the database.
The basic goal of this assignment was to explore the NOAA Storm Database and answer some basic questions about severe weather events.
Loading the Data
---
author: "Marcos Alexandre Lodis"
date: "23, August,2014"
output: html_document
---
Climatic events and effects to public health and economic problems
========================================================
## Synopsis
Storms and other severe weather events can cause both public health and economic problems for communities and municipalities.
This database tracks characteristics of major storms and weather events in the United States, including when and where they occur, as well as estimates of any fatalities, injuries, and property damage.
In this report, I aim to describe which storm events are the most damaging to population and economic health.
To investigate the problems, I obtained data from the U.S. National Oceanic and Atmospheric Administration's (NOAA) storm database.
Data
----
I download the file from the course web site including some documentation of the database.
The basic goal of this assignment was to explore the NOAA Storm Database and answer some basic questions about severe weather events.
##Loading the Data
---
author: "Marcos Alexandre Lodis"
date: "23, August,2014"
output: html_document
---
Climatic events and effects to public health and economic problems
========================================================
library(lattice)
url <- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
datasetDirPath <- file.path("weather.csv.bz2")
if(!file.exists(datasetDirPath)){
download.file(url,datasetDirPath)
}
url <- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
datasetDirPath <- file.path("weather.csv.bz2")
url
datasetDirPath
## Source 'lattice' library
library(lattice)
## Set variables for download
url <- "http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
datasetDirPath <- file.path("weather.csv.bz2")
## Downloading/Unzipping data *iff* data doesn't already exist
if(!file.exists(datasetDirPath)){
download.file(url,datasetDirPath)
}
## Read in csv file and delete bz2 file.
weather <- read.csv(bzfile(datasetDirPath), na.strings = c("NA", ""), stringsAsFactors = FALSE)
weather <- data.frame(Event = weather$EVTYPE, Fatalities = weather$FATALITIES, Injuries = weather$INJURIES, PropertyDamage = weather$PROPDMG, propdmgexp = weather$PROPDMGEXP, CropDamage = weather$CROPDMG, cropdmgexp = weather$CROPDMGEXP, Remarks = weather$REMARKS)
weather$Event <- gsub("[[:digit:][:punct:]])"," ", weather$Event)
weather$Event <- gsub("[[:space:]]+)"," ", weather$Event)
weather$Event <- gsub("^[[:space:]]+|[[:space:]]+$ )"," ", weather$Event)
weather$Event[grep("TSTM WIND|THUNDERSTORM WIND", weather$Event)] <- "TSTM WIND"
weather$Event[grep("WINTER STORM", weather$Event)] <- "BLIZZARD"
weather$Casualties <- weather$Injuries + weather$Fatalities
eventCasualties <- aggregate(Casualties ~ Event, weather, sum)
eventCasualties <- eventCasualties[eventCasualties$Casualties > 0,]
eventCasualties <- eventCasualties[with(eventCasualties, order(-Casualties, Event)), ]
topEventsHealth <- head(eventCasualties, 10)
translate <- c(h = 100, k = 1000, m = 1e+06, b = 1e+09)
## Convert property damage to scale
weather$propdmgexp <- translate[tolower(weather$propdmgexp)]
weather$propdmgexp[is.na(weather$propdmgexp)] = 1
weather$PropertyDamage <- weather$PropertyDamage * weather$propdmgexp
## Rinse and repeat for crop damage.
weather$cropdmgexp <- translate[tolower(weather$cropdmgexp)]
weather$cropdmgexp[is.na(weather$cropdmgexp)] = 1
weather$CropDamage <- weather$CropDamage * weather$cropdmgexp
eventPropDmg <- aggregate(PropertyDamage ~ Event, weather, sum)
eventPropDmg <- eventPropDmg[eventPropDmg$PropertyDamage > 0,]
eventPropDmg <- eventPropDmg[with(eventPropDmg, order(-PropertyDamage, Event)), ]
eventCropDmg <- aggregate(CropDamage ~ Event, weather, sum)
eventCropDmg <- eventCropDmg[eventCropDmg$CropDamage > 0,]
eventCropDmg <- eventCropDmg[with(eventCropDmg, order(-CropDamage, Event)), ]
topEventsProp <- head(eventPropDmg, 10)
topEventsCrop <- head(eventCropDmg, 10)
barchart(Casualties ~ Event, topEventsHealth, xlab="Event", ylab="Casualties")
barchart(CropDamage ~ Event, topEventsCrop, xlab="Event", ylab="Crop Damage (US Dollars)")
barchart(PropertyDamage ~ Event, topEventsProp, xlab="Event", ylab="Property Damage (US Dollars)")
weather <- read.csv(bzfile(datasetDirPath), na.strings = c("NA", ""), stringsAsFctors = FALSE)
weather <- read.csv(bzfile(datasetDirPath), na.strings = c("NA", ""),
stringsAsFactors = FALSE)
render("Project_3", "pdf_document")
Show where the distribution is centered at and compare it to the theoretical center of the distribution
-
install.packages("devtools")
library(rmarkdown)
?pdf
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
e <- resid(fit)
sqe <- e*e
res.var <- sum(sqe) / (length(e) - 2)
sqrt(res.var)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2]
exp - 2 * 0.5591
?mtcars
summary(fit)
fit[[1]][1] + 3 * fit[[1]][2]
summary(fit)
fit[[1]][1] - 3 * fit[[1]][2]
setwd("C:\\Users\\Marcos\\Desktop\\Project PLM")
---
title: "PML- Project"
output: html_document
---
Get and Clean data
Load libraries and data
```{r}
library(caret)
library(doParallel)
# Load the data, the strings 'NA', 'NULL' and blank spaces to be seat as NA values
trainData <- read.csv('pml-training.csv', na.strings=c('', 'NA', 'NULL'))
testData <- read.csv('pml-testing.csv', na.strings=c('', 'NA', 'NULL'))
```
Exploratory Data Analysis
Find data dimension, names of the variables
```{r}
dim(trainData)
names(trainData)
```
The data set has r nrow(trainData) observations and r ncol(trainData) possible predictors. Looks like there is a lot of NAs. Let's check missing values and ranges.
```{r}
summary(trainData)
```
Its quite self explanatory that there are lots of predictors that can be removed because of their missing values.
Examining data types
```{r}
# Data type per column
sapply(trainData[1, ], class)
# Look for duplicated columns
duplicated(names(trainData))
Indentify the type of activity
```
setwd("C:\\Users\\Marcos\\Desktop\\Project PLM")
---
title: "PML- Project"
output: html_document
---
```{r}
library(ggplot2)
library(caret)
library(randomForest)
```
Load data.
Remove near zero covariates and those with more than 80% missing values since these variables will not provide much power for prediction.
Calculate correlations between each remaining feature to the response, classe. Use spearman rank based correlation because classe is a factor.
Plot the two features that have highest correlation with classe and color with classe to see if we can separate response based on these features.
```{r}
# load data
training <- read.csv("./data/pml-training.csv", row.names = 1)
testing <- read.csv("./data/pml-testing.csv", row.names = 1)
# remove near zero covariates
nsv <- nearZeroVar(training, saveMetrics = T)
training <- training[, !nsv$nzv]
# remove variables with more than 80% missing values
nav <- sapply(colnames(training), function(x) if(sum(is.na(training[, x])) > 0.8*nrow(training)){return(T)}else{return(F)})
training <- training[, !nav]
# calculate correlations
cor <- abs(sapply(colnames(training[, -ncol(training)]), function(x) cor(as.numeric(training[, x]), as.numeric(training$classe), method = "spearman")))
# plot predictors
summary(cor)
plot(training[, names(which.max(cor))], training[, names(which.max(cor[-which.max(cor)]))], col = training$classe, pch = 19, cex = 0.1, xlab = names(which.max(cor)), ylab = names(which.max(cor[-which.max(cor)])))
```
The training set has r nrow(training) samples and r ncol(training) - 1 potential predictors after filtering.
There doesn't seem to be any strong predictors that correlates with classe well, so linear regression model is probably not suitable in this case. Boosting and random forests algorithms may generate more robust predictions for our data.
Boosting model
Fit model with boosting algorithm and 10-fold cross validation to predict classe with all other predictors.
Plot accuracy of this model on the scale [0.9, 1].
```{r}
set.seed(123)
boostFit <- train(classe ~ ., method = "gbm", data = training, verbose = F, trControl = trainControl(method = "cv", number = 10))
boostFit
plot(boostFit, ylim = c(0.9, 1))
```
The boosting algorithm generated a good model with accuracy = 0.997.
Random forests model
Fit model with random forests algorithm and 10-fold cross validation to predict classe with all other predictors.
Plot accuracy of the model on the same scale as boosting model.
```{r}
set.seed(123)
rfFit <- train(classe ~ ., method = "rf", data = training, importance = T, trControl = trainControl(method = "cv", number = 10))
rfFit
plot(rfFit, ylim = c(0.9, 1))
imp <- varImp(rfFit)$importance
imp$max <- apply(imp, 1, max)
imp <- imp[order(imp$max, decreasing = T), ]
```
The random forests algorithm generated a very accurate model with accuracy close to 1. Compared to boosting model, this model generally has better performance in terms of accuracy as we see from the plots.
Final model and prediction
Comparing model accuracy of the two models generated, random forests and boosting, random forests model has overall better accuracy. So, I'll use this model for prediction.
The final random forests model contains 500 trees with 40 variables tried at each split. The five most important predictors in this model are r rownames(imp)[1:5].
Estimated out of sample error rate for the random forests model is 0.04% as reported by the final model.
Predict the test set and output results for automatic grader.
```{r}
# final model
rfFit$finalModel
# prediction
(prediction <- as.character(predict(rfFit, testing)))
# write prediction files
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("./prediction/problem_id_", i, ".txt")
write.table(x[i], file = filename, quote = FALSE, row.names = FALSE, col.names = FALSE)
}
}
pml_write_files(prediction)
```
library(ggplot2)
library(caret)
library(randomForest)
training <- read.csv("./data/pml-training.csv", row.names = 1)
testing <- read.csv("./data/pml-testing.csv", row.names = 1)
setwd("C:\\Users\\Marcos\\Desktop\\Project PLM")
training <- read.csv('pml-training.csv', na.strings=c('', 'NA', 'NULL'), row.names = 1)
testing <- read.csv('pml-testing.csv', na.strings=c('', 'NA', 'NULL'), row.names = 1)
```{r}
# load data
training <- read.csv('pml-training.csv', na.strings=c('', 'NA', 'NULL'), row.names = 1)
testing <- read.csv('pml-testing.csv', na.strings=c('', 'NA', 'NULL'), row.names = 1)
# remove near zero covariates
nsv <- nearZeroVar(training, saveMetrics = T)
training <- training[, !nsv$nzv]
# remove variables with more than 80% missing values
nav <- sapply(colnames(training), function(x) if(sum(is.na(training[, x])) > 0.8*nrow(training)){return(T)}else{return(F)})
training <- training[, !nav]
# calculate correlations
cor <- abs(sapply(colnames(training[, -ncol(training)]), function(x) cor(as.numeric(training[, x]), as.numeric(training$classe), method = "spearman")))
# plot predictors
summary(cor)
plot(training[, names(which.max(cor))], training[, names(which.max(cor[-which.max(cor)]))], col = training$classe, pch = 19, cex = 0.1, xlab = names(which.max(cor)), ylab = names(which.max(cor[-which.max(cor)])))
```
The training set has r nrow(training) samples and r ncol(training) - 1 potential predictors after filtering.
There doesn't seem to be any strong predictors that correlates with classe well, so linear regression model is probably not suitable in this case. Boosting and random forests algorithms may generate more robust predictions for our data.
Boosting model
Fit model with boosting algorithm and 10-fold cross validation to predict classe with all other predictors.
Plot accuracy of this model on the scale [0.9, 1].
```{r}
set.seed(123)
boostFit <- train(classe ~ ., method = "gbm", data = training, verbose = F, trControl = trainControl(method = "cv", number = 10))
3
2
set.seed(123)
rfFit <- train(classe ~ ., method = "rf", data = training, importance = ,trContr= trainControl(method = "cv", number = 10))
```
rfFit
set.seed(123)
rfFit <- train(classe ~ ., method = "rf", data = training, importance = ,trContr= trainControl(method = "cv", number = 10))
rfFit
set.seed(123)
rfFit <- train(classe ~ ., method = "rf", data = training, importance = T, trControl = trainControl(method = "cv", number = 10))
set.seed(123)
rfFit <- train(classe ~ ., method = "rf", data = training, importance = T, trControl = trainControl(method = "cv", number = 10))
library(MASS)
library(ggplot2)
library(lattice)
library(caret)
set.seed(1234)
trainingcsv<-read.csv("pml-training.csv")
training2<-trainingcsv[,sapply(trainingcsv, is.numeric)]
trainingrow<-sapply(training2,function(x)any(is.na(x)))
training3<-training2[,!trainingrow]
cleantraining<-cbind(training3,trainingcsv[,160])
names<-colnames(cleantraining)
names[57]=c("classe")
colnames(cleantraining)<-names
inTraining<-createDataPartition(y=cleantraining$classe,p=0.7,list=FALSE)
training<-cleantraining[inTraining,]
testing<-cleantraining[-inTraining,]
preProc<-preProcess(training[,-57], method="pca",tresh=0.9)
trainPC<-predict(preProc,training[,-57])
modelFit<-train(training$classe~.,method="rf",data=trainPC)
testing <- read.csv("./pml-testing.csv", header=TRUE, sep=",", dec=".")
training <- read.csv("./pml-training.csv", header=TRUE, sep=",", dec=".")
trainingA <- training[ , -c(1:7,12:36,50:59,69:83,87:112,125:139,141:150)]
testingF <- testing[ , -c(1:7,12:36,50:59,69:83,87:112,125:139,141:150)]
library(lattice); library(ggplot2); library(caret)
inTrain <- createDataPartition(y=training2$classe, p=0.1, list=FALSE)
training2 <- trainingA[inTrain, ]
testing2 <- trainingA[-inTrain, ]
library(e1071); library(randomForest)
preProc <- preProcess(training2[ , -52], method=c("scale","center"))
trainRF <- predict(preProc, training2[ , -52])
modFit <- train(training2$classe ~., method="rf", data=trainRF, prox=TRUE)
testRF <- predict(preProc, testing2[ , -52])
confusionMatrix(testing2$classe, predict(modFit, testRF))
library(lattice); library(ggplot2); library(caret)
inTrain <- createDataPartition(y=training2$classe, p=0.1, list=FALSE)
training2 <- trainingA[inTrain, ]
testing2 <- trainingA[-inTrain, ]
inTrain <- createDataPartition(y=training2$classe, p=0.1, list=FALSE)
ml_training <- read.csv('pml-training.csv')
rows_with_div_0 <- unique(unlist(lapply(pml_training, function(x) which(x == '#DIV/0!'))))
pml_training <- pml_training[-rows_with_div_0,]
pml_training <- pml_training[,c(-1,-2,-3,-4,-5,-6)]
pml_training <- modifyList(pml_training, lapply(pml_training[,sapply(pml_training[,-154], is.factor)], as.numeric))
pml_training <- pml_training[,sapply(pml_training, function(x)!all(is.na(x)))]
pml_training <- pml_training[,sapply(pml_training, function(x)!all(x==1))]
pml_training <- read.csv('pml-training.csv')
rows_with_div_0 <- unique(unlist(lapply(pml_training, function(x) which(x == '#DIV/0!'))))
pml_training <- pml_training[-rows_with_div_0,]
pml_training <- pml_training[,c(-1,-2,-3,-4,-5,-6)]
pml_training <- modifyList(pml_training, lapply(pml_training[,sapply(pml_training[,-154], is.factor)], as.numeric))
pml_training <- pml_training[,sapply(pml_training, function(x)!all(is.na(x)))]
pml_training <- pml_training[,sapply(pml_training, function(x)!all(x==1))]
set.seed(12345)
library(caret)
inTrain <- createDataPartition(pml_training$classe, p = 0.7, list = FALSE)
training <- pml_training[inTrain,]
testing <- pml_training[-inTrain,]
fitControl <- trainControl(method = "repeatedcv",number = 2,repeats = 5, allowParallel=TRUE)
library(doMC)
registerDoMC(4) # register 4 cores
modelFitKnn <- train(classe ~., data=training, method='knn', trControl = fitControl, preProcess=c("pca"))
plot(modelFitKnn)
install.packages("doMC")
library(doMC)
